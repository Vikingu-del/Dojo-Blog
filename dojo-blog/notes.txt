// using watch, watchEffect, computed and how to stop them 
<template>
    <div class="home">
        <h1>Home</h1>
        <input type="text" v-model="search">
        <p>search term - {{ search }}</p>
        <div v-for="name in matchingNames" :key="name">
            {{ name }}
        </div>
        <button @click="handleClick">stop watching</button>
    </div>
</template>

<script>
import { computed, ref, watch, watchEffect } from 'vue'

export default {
    name: 'Home',
    setup() {
        const search = ref('')
        const names = ref(['mario', 'luigi', 'yoshi', 'toad', 'bowser', 'koopa', 'peach'])

        const stopWatch = watch(search, () => {
            console.log('watcher is running')
        })

        const stopEffect = watchEffect(() => {
            console.log('watchEffect is running', search.value)
        })

        const handleClick = () => {
            stopWatch()
            stopEffect()
        }

        const matchingNames = computed(() => {
            return names.value.filter(name => {
                return name.includes(search.value)
            })
        })

        return { names, search, matchingNames , handleClick }
    }
}
</script>




-----------------------------------------------------------------------------

// Ref over Reactive because reactive can not use the primitive values, 
// refs works better when we are creating external composition functions
// because they reatin their reactivity when exposed by these external 
// functions
<template>
    <div class="home">
        <h1>Home</h1>
        <h2>Refs</h2>
        <p>{{ ninjaOne.name }} - {{ ninjaOne.age }}</p>
        <button @click="updateNinjaOne">Update ninja one</button>
        <h2>Reactive</h2>
        <p>{{ ninjaTwo.name }} - {{ ninjaTwo.age }} - {{ nameTwo }} </p>
        <button @click="updateNinjaTwo">Update ninja two</button>
    </div>
</template>

<script>
import { ref, reactive } from 'vue';

export default {
    name: 'Home',
    setup() {
        const ninjaOne = ref({
            name: 'mario',
            age: 30
        })

        const ninjaTwo = reactive({
            name: 'luigi',
            age: 35
        })

        const nameOne = ref('mario')
        const nameTwo = reactive('luigi')


        const updateNinjaOne = () => {
            ninjaOne.value.age = 40
        }

        const updateNinjaTwo = () => {
            ninjaTwo.age = 45
            nameTwo = reactive('yoshi')
        }

        return { ninjaOne, updateNinjaOne, ninjaTwo, updateNinjaTwo, nameTwo }
    }
}
</script>

<style>

</style>

-------------------------------------------------------------------------------

<template>
    <div class="home">
        <h1>Home</h1>
        <p>My name is {{ name }} and my age is {{ age }}</p>
        <button @click="handleClick">click me</button>
        <input type="text" v-model="name">
    </div>
</template>

<script>
import { ref } from 'vue';

export default {
    name: 'Home',
    setup() {
        // console.log(this) 
        /* 
            this will print undefined because we are using composition API
            And in compositon API, we don't have access to <this> keyword
            but we can use ref() to access the data
        */

        // const p = ref(null)

        // console.log(p, p.value)
        const name = ref('mario')
        const age = ref(30)



        const handleClick = () => {
            // console.log(p, p.value)
            // p.value.classList.add('test')
            // p.value.textContent = 'hello, ninjas'
            name.value = 'luigi'
            age.value = 45
        }

        return { name, age, handleClick }
    },
    // created() {
    //     console.log('created')
    // },
    // mounted() {
    //     console.log('mounted')
    // },
}
</script>

<style>

</style>